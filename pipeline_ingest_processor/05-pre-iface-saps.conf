filter {
    ##
    # This does two things:
    #  1. Generates a friendlier SAP name that replaces port ID with name in oidIndex
    #  2. Determines which meta map we will use based on sapType. If ies or l3vpn, performs lookup for vrtrIfIndex so can merge that metadata.
    ##

    # optimization - Only lookup sap_id when we get sapType (as opposed to every time we have an oid_index)
    if [fields][SNMP_TIMETRA-SAP-MIB::sapType] {
        mutate {
            copy => {
                "[meta][oid_index]" => "[@metadata][sap_id]"
            }
        }
    }

    #check SAP type to determine where we will store metadata
    if [fields][SNMP_TIMETRA-SAP-MIB::sapType] == 4 or [fields][SNMP_TIMETRA-SAP-MIB::sapType] == 5 {
        #if l3vpn(4) or ies(5) use meta to lookup l3 ports
        mutate {
            rename => {
                "[@metadata][mapping_config][meta_maps_l3]" => "[@metadata][mapping_config][meta_maps]"
            }
        }
    } else {
        #otherwise (e.g l2vpn) oid index
        mutate {
            rename => {
                "[@metadata][mapping_config][meta_maps_default]" => "[@metadata][mapping_config][meta_maps]"
            }
        }
    }

    #Normalize OSCARS circuit ids - legacy ids take form OSCARS_ES_NET-<id> or oscars_es_net-<id>. 
    # We want them in form OSCARS-es.net-<id>
    if [fields][SNMP_TIMETRA-SAP-MIB::sapDescription] {
        mutate {
            gsub => ["[fields][SNMP_TIMETRA-SAP-MIB::sapDescription]", "^(OSCARS_ES_NET)|(oscars_es_net)", "OSCARS-es.net" ]
        }
    }

    #Calculate total incoming bytes by summing in-profile and out-of-profile bytes
    if [fields][SNMP_TIMETRA-SAP-MIB::sapBaseStatsIngressQchipForwardedOutProfOctets] and [fields][SNMP_TIMETRA-SAP-MIB::sapBaseStatsIngressQchipForwardedInProfOctets] {
        ruby {
            code => "
                total = event.get('[fields][SNMP_TIMETRA-SAP-MIB::sapBaseStatsIngressQchipForwardedOutProfOctets]').to_i
                total += event.get('[fields][SNMP_TIMETRA-SAP-MIB::sapBaseStatsIngressQchipForwardedInProfOctets]').to_i
                event.set('[@metadata][sap_in_bytes]', total)
            "
        }
    }

    #Calculate total outgoing bytes by summing in-profile and out-of-profile bytes
    if [fields][SNMP_TIMETRA-SAP-MIB::sapBaseStatsEgressQchipForwardedOutProfOctets] and [fields][SNMP_TIMETRA-SAP-MIB::sapBaseStatsEgressQchipForwardedInProfOctets] {
        ruby {
            code => "
                total = event.get('[fields][SNMP_TIMETRA-SAP-MIB::sapBaseStatsEgressQchipForwardedOutProfOctets]').to_i
                total += event.get('[fields][SNMP_TIMETRA-SAP-MIB::sapBaseStatsEgressQchipForwardedInProfOctets]').to_i
                event.set('[@metadata][sap_out_bytes]', total)
            "
        }
    }

    #Reformat SAP queue index and parse queue number
    if [fields][SNMP_TIMETRA-SAP-MIB::sapEgrQosQueueStatsForwardedInProfOctets] or [fields][SNMP_TIMETRA-SAP-MIB::sapIngQosQueueStatsForwardedInProfOctets]{
        dissect {
            mapping => {
                "[meta][oid_index]" => "%{[@metadata][sap_oid1]}.%{[@metadata][sap_oid2]}.%{[@metadata][sap_oid3]}.%{[@metadata][queue_num]}"
            }
        }
        #Note: This does not break rate calculations by unintentionally merging
        # queues because the first pipeline phase sets [@metadata][metadata_lookup_keys][_root]
        # which is used to build the prefix for rate buckets
        mutate {
            replace => {
                "[meta][oid_index]" => "%{[@metadata][sap_oid1]}.%{[@metadata][sap_oid2]}.%{[@metadata][sap_oid3]}"
            }
        }
    }
}