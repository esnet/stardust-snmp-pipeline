filter {
    if [@parser] == "transponder" {
        #check for polling error
        if [error] {
            ruby {
                code => "logger.debug('Received error event from poller. This is not an error with pipeline, just reporting error from poller.', 'error' => event.get('[error][message]'))"
            }
            # drop event
            drop {}
        }

        #Normalize fields related to collection
        mutate {
            rename => {
                "[host][name]" => "[meta][sensor_id]"
            }
            copy => {
                "@timestamp" => "@collect_time"
            }
        }
        if [metric_info][interval] {
            mutate {
                rename => {
                    "[metric_info][interval]" => "[interval]"
                }
            }
        }else {
            #Default to 10 minutes if no interval set - this determines redis expires
            mutate {
                add_field => {
                    "interval" => "600"
                }
            }
        }

        #add namespace universal to this pipeline
        mutate {
            add_field => {
                "namespace" => "transponder"
            }
        }

        #grok host and drop optional port from device name
        grok {
            match => {
                "[service][address]" => "https?://%{IPORHOST:[meta][device]}?(:%{POSINT})?"
            }
        }

        #Remove doman from device name
        mutate {
            gsub => ["[meta][device]", "\..+$", ""]
        }

        #Split data events in single event for Infinera g30 events
        if [metric_info][category] == "data" and [metric_info][type] == "bulk" {
            if [metric_info][parser] == "infinera_g30" {
                split {
                    field => "[http][json_data][coriant-rpc:output][pm-data]"
                }
            }else{
                #If add other parsers in future with bulk events then add here
                drop{}
            }
        }
        
        #Set device_type based on parser
        mutate {
            add_field => {
                "[meta][device_type]" => "%{[metric_info][parser]}"
            }
        }
        
        if [http][json_data][coriant-rpc:output][pm-data][pmp-type] and [http][json_data][coriant-rpc:output][pm-data][pm-entity] {
            ##
            # Parse the enitity which tells us if it is a port, channel or otherwise
            # Also extracts the name
            ruby {
                code => '
                    is_line_card = false
                    name = ""
                    entity = event.get("[http][json_data][coriant-rpc:output][pm-data][pm-entity]")
                    ent_parts = entity.sub(/^\//, "").sub(/\/$/, "").split("/")
                    ent_parts.each do |ep|
                        if matches = ep.match(/shelf\[shelf-id=\'(\d+)\'\]/) then
                            event.set("[meta][shelf_name]", "#{matches[1]}")
                            name = matches[1]
                        elsif matches = ep.match(/slot\[slot-id=\'(\d+)\'\]/) then
                            event.set("[meta][slot_name]", "#{matches[1]}")
                            name = "#{name}/#{matches[1]}"
                        elsif matches = ep.match(/port\[port-id=\'(\d+)\'\]/) then
                            event.set("[meta][port_name]", "#{matches[1]}")
                            event.set("[metric_info][type]", "port")
                            name = "#{name}/#{matches[1]}"
                        elsif ep == "och-os" then
                            is_line_card = true
                        elsif is_line_card && matches = ep.match(/^odu\[odutype-L1=\'(.+)\'\]\[oduid-L1=\'(.+)\'\]\[odutype-L2=\'(.+)\'\]\[oduid-L2=\'(.+)\'\]\[odutype-L3=\'(.+)\'\]\[oduid-L3=\'(.+)\'\]\[odutype-L4=\'(.+)\'\]\[oduid-L4=\'(.+)\'\]/) then
                            event.set("[metric_info][type]", "channel")
                            #build channel name
                            channel_name = ""
                            for i in 1..matches.length
                                if (i % 2) == 0 then
                                    channel_name += "-#{matches[i]}" 
                                elsif matches[i] == "unused" then
                                    break
                                else
                                    channel_name += "/#{matches[i]}" 
                                end
                            end
                            event.set("[meta][channel_name]", "#{channel_name}")
                            name = "#{name}#{channel_name}"
                        end
                    end
                    event.set("[meta][name]", name)
                    #set this so rate calcs generate a proper key
                    event.set("[metric_info][id]", name)
                '
            }
            #Individual g30 event
            mutate {
                add_field => {
                    "[@metadata][event_type]" => "%{[metric_info][parser]}_%{[metric_info][type]}_%{[http][json_data][coriant-rpc:output][pm-data][pmp-type]}_%{[http][json_data][coriant-rpc:output][pm-data][pm-parameter]}"
                }
            }
            #debug fields
            # mutate {
            #     add_field => {
            #         "[meta][event_type]" => "%{[@metadata][event_type]}"
            #         "[meta][pm_entity]" => "%{[http][json_data][coriant-rpc:output][pm-data][pm-entity]}"
            #     }
            # }

        }else if [metric_info][subtype] {
            #if has subtype, include in event type
            mutate {
                add_field => {
                    "[@metadata][event_type]" => "%{[metric_info][parser]}_%{[metric_info][type]}_%{[metric_info][subtype]}_%{[metric_info][category]}"
                }
            }
        }else if [metric_info][type] {
            #otherwise base on type
            mutate {
                add_field => {
                    "[@metadata][event_type]" => "%{[metric_info][parser]}_%{[metric_info][type]}_%{[metric_info][category]}"
                }
            }
        }else {
            #Invalid event
            drop{}
        }


        #Set key that is used for various lookups like rates
        if [metric_info][id] {
            mutate {
                add_field => {
                    "[@metadata][metadata_lookup_keys][_root]" => "%{[@metadata][event_type]}:%{[meta][device]}:%{[metric_info][id]}"
                }
            }
        }
    }
}