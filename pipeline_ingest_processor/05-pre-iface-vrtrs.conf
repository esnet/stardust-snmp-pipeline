filter {
    ##
    # This filter implements logic to build a sap id to map l3vpn virtual routers to a nokia SAP. 
    # Logic is complicated enough that waranted a custom filter. It just build the id based on 
    # collecion of fields if they are all available. Skips if service id is 0 because that means it has no SAP.
    ##
    #Build SAP index if we have the fields for it
    if [fields][SNMP_TIMETRA-VRTR-MIB::vRtrIfServiceId] and [fields][SNMP_TIMETRA-VRTR-MIB::vRtrIfServiceId] != 0 and [fields][SNMP_TIMETRA-VRTR-MIB::vRtrIfPortID] and [fields][SNMP_TIMETRA-VRTR-MIB::vRtrIfEncapValue] {
        #Otherwise create the SAP id in form of serviceId.portId.encapValue. This matches the oid index of SAP for l3vpns.
        mutate {
            add_field => {
                "[@metadata][sap_index]" => "%{[fields][SNMP_TIMETRA-VRTR-MIB::vRtrIfServiceId]}.%{[fields][SNMP_TIMETRA-VRTR-MIB::vRtrIfPortID]}.%{[fields][SNMP_TIMETRA-VRTR-MIB::vRtrIfEncapValue]}"
            }
        }
    }

    # make sure we only set the vrtrifindex once by only setting when we set name
    if [fields][SNMP_TIMETRA-VRTR-MIB::vRtrIfName] {
        mutate {
            add_field => {
                "[@metadata][vrtr_ifindex]" => "%{[meta][oid_index]}"
            }
        }
    }

    #Detect whether an ip address is v4 or v6 - if other type (like link local v4/v6) we don't care
    if [fields][SNMP_TIMETRA-VRTR-MIB::vRiaInetAddressType] == 1 {
        #IPv4
        mutate {
            rename => {
                "[fields][SNMP_TIMETRA-VRTR-MIB::vRiaInetAddress]" => "[@metadata][vrtrif_ipv4]"
                "[fields][SNMP_TIMETRA-VRTR-MIB::vRiaInetPrefixLen]" => "[@metadata][vrtrif_ipv4_len]"
            }
        }
    } else if [fields][SNMP_TIMETRA-VRTR-MIB::vRiaInetAddressType] == 2 {
        #IPv6
        mutate {
            rename => {
                "[fields][SNMP_TIMETRA-VRTR-MIB::vRiaInetAddress]" => "[@metadata][vrtrif_ipv6]"
                "[fields][SNMP_TIMETRA-VRTR-MIB::vRiaInetPrefixLen]" => "[@metadata][vrtrif_ipv6_len]"
            }
        }
    }

    #Calculate total incoming bytes by summing in-profile and out-of-profile bytes
    if [fields][SNMP_TIMETRA-VRTR-MIB::vRtrIfRxBytes] and [fields][SNMP_TIMETRA-VRTR-MIB::vRtrIfRxMplsBytes] {
        ruby {
            code => "
                total = event.get('[fields][SNMP_TIMETRA-VRTR-MIB::vRtrIfRxBytes]').to_i
                total += event.get('[fields][SNMP_TIMETRA-VRTR-MIB::vRtrIfRxMplsBytes]').to_i
                event.set('[@metadata][vrtrif_total_in_bytes]', total)
            "
        }
    }

    #Calculate total incoming bytes by summing in-profile and out-of-profile bytes
    if [fields][SNMP_TIMETRA-VRTR-MIB::vRtrIfTxBytes] and [fields][SNMP_TIMETRA-VRTR-MIB::vRtrIfTxMplsBytes] {
        ruby {
            code => "
                total = event.get('[fields][SNMP_TIMETRA-VRTR-MIB::vRtrIfTxBytes]').to_i
                total += event.get('[fields][SNMP_TIMETRA-VRTR-MIB::vRtrIfTxMplsBytes]').to_i
                event.set('[@metadata][vrtrif_total_out_bytes]', total)
            "
        }
    }
}