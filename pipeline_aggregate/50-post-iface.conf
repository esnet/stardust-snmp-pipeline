filter {
    if [type] == "interface" {
        
        # Choose the best field for in and out bits.
        # Preference Order:
        # 1. VRTR stats (total first, fallback to non-mpls)
        # 2. IF stats
        # 3. SAP stats
        ##Incoming
        ruby {
            path => '/usr/lib/stardust/pipeline/ruby/field_normalize.rb'
            script_params => {
                "source" => [ "[values][vrtrif_total_in_bits]", "[values][vrtrif_in_bits]", "[values][if_in_bits]", "[values][sap_in_bits]" ]
                "target" => "[values][in_bits]"
            }
            tag_on_exception => '_rubyexception in field_normalize.rb'
        }
        ##Outgoing
        ruby {
            path => '/usr/lib/stardust/pipeline/ruby/field_normalize.rb'
            script_params => {
                "source" => [ "[values][vrtrif_total_out_bits]", "[values][vrtrif_out_bits]", "[values][if_out_bits]", "[values][sap_out_bits]" ]
                "target" => "[values][out_bits]"
            }
            tag_on_exception => '_rubyexception in field_normalize.rb'
        }

        #Add an is_lag field if there is lag members
        if [meta][lag_members] {
            mutate {
                add_field => {
                    "[meta][is_lag]" => "true"
                }
            }
            mutate {
                convert => {
                    "[meta][is_lag]" => "boolean"
                }
            }
        }

        #Set intercloud if any of the descriptions matched intercloud
        if [meta][sap_intercloud] or [meta][vrtr_intercloud] or [meta][if_intercloud] {
            mutate {
                add_field => {
                    "[meta][intercloud]" => "true"
                }
            }
        } else {
            mutate {
                add_field => {
                    "[meta][intercloud]" => "false"
                }
            }
        }
        #cast intercloud to boolean remove extra intercloud fields
        mutate {
            convert => {
                "[meta][intercloud]" => "boolean"
            }
            remove_field => ["[meta][sap_intercloud]", "[meta][vrtr_intercloud]", "[meta][if_intercloud]"]
        }

        #Create a normalized description field
        # Preference order is 1) SAP descr 2) vrtr descr and 3) ifAlias.
        # Most of these match but hen SAP descr in place it matches vrtr but also includes intercloud, which is why it is #1 in list.
        if [meta][sap_descr] {
            mutate {
                copy => {
                    "[meta][sap_descr]" => "[meta][descr]"
                }
            }
        } else if [meta][vrtr_ifdescr] {
            mutate {
                copy => {
                    "[meta][vrtr_ifdescr]" => "[meta][descr]"
                }
            }
        } else if [meta][alias] {
            mutate {
                copy => {
                    "[meta][alias]" => "[meta][descr]"
                }
            }
        }

        #Grab connection details from description - could do this in mappings.yaml but would have to look at all three descriptions
        grok {
            match => {
                "[meta][descr]" => "^%{DATA:}-[->]-?%{DATA:[meta][remote][full_name]}:.+"
            }
        }

        #split the description into a tokenized array for easier searching
        mutate {
            copy => {
                "[meta][descr]" => "[meta][descr_parts]"
            }
        }
        mutate {
            split => {
                "[meta][descr_parts]" => ":"
            }
        }

        #create a short name that drops AS info - check for field to avoid log warning
        if [meta][remote][full_name] {
            #normalize as uppercase
            mutate {
                uppercase => ["[meta][remote][full_name]"]
            }
            mutate {
                copy => {
                    "[meta][remote][full_name]" => "[meta][remote][short_name]"
                }
            }
            mutate {
                gsub => ["[meta][remote][short_name]", "\(.+\)", ""]
            }
        }
        #move lldp fields to remote object
        mutate {
            rename => {
                "[meta][remote_device]" => "[meta][remote][device]"
            }
        }
        mutate {
            rename => {
                "[meta][remote_port]" => "[meta][remote][port]"
            }
        }

        # Determine admin status. 
        # Preference Order:
        # 1. If any are down then set as down
        # 2. If any are not "up" set to "not up" state, order is SAP, VRTR, IF
        # 3. Otherwise set to up
        if ([meta][sap_admin_status] and [meta][sap_admin_status] == "down") or ([meta][if_admin_status] and [meta][if_admin_status] == "down") or ([meta][vrtr_ifadminstatus] and [meta][vrtr_ifadminstatus] == "down") {
            mutate { add_field => { "[meta][admin_status]" => "down" } }
        } else if [meta][sap_admin_status] and [meta][sap_admin_status] != "up" {
            mutate { copy => { "[meta][sap_admin_status]" => "[meta][admin_status]" } }
        } else if [meta][vrtr_ifadminstatus] and [meta][vrtr_ifadminstatus] != "up" {
            mutate { copy => { "[meta][vrtr_ifadminstatus]" => "[meta][admin_status]" } }
        } else if [meta][if_admin_status] and [meta][if_admin_status] != "up" {
            mutate { copy => { "[meta][if_admin_status]" => "[meta][admin_status]" } }
        } else {
            mutate { add_field => { "[meta][admin_status]" => "up" } }
        }

        # Determine oper status. 
        # Preference Order:
        # 1. If any are down then set as down
        # 2. If any are not "up" set to "not up" state, order is SAP, VRTR, IF
        # 3. Otherwise set to up
        if ([meta][sap_oper_status] and [meta][sap_oper_status] == "down") or ([meta][if_oper_status] and [meta][if_oper_status] == "down") or ([meta][vrtr_ifoperstatus] and [meta][vrtr_ifoperstatus] == "down") {
            mutate { add_field => { "[meta][oper_status]" => "down" } }
        } else if [meta][sap_oper_status] and [meta][sap_oper_status] != "up" {
            mutate { copy => { "[meta][sap_oper_status]" => "[meta][oper_status]" } }
        } else if [meta][vrtr_ifoperstatus] and [meta][vrtr_ifoperstatus] != "up" {
            mutate { copy => { "[meta][vrtr_ifoperstatus]" => "[meta][oper_status]" } }
        } else if [meta][if_oper_status] and [meta][if_oper_status] != "up" {
            mutate { copy => { "[meta][if_oper_status]" => "[meta][oper_status]" } }
        } else {
            mutate { add_field => { "[meta][oper_status]" => "up" } }
        }
    }
}